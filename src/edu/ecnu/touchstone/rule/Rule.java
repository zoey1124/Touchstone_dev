package edu.ecnu.touchstone.rule;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import edu.ecnu.touchstone.constraintchain.*;
import edu.ecnu.touchstone.extractor.Query;
import edu.ecnu.touchstone.run.Touchstone;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.conditional.AndExpression;
import net.sf.jsqlparser.expression.operators.conditional.OrExpression;
import net.sf.jsqlparser.expression.operators.relational.ComparisonOperator;
import net.sf.jsqlparser.expression.operators.relational.EqualsTo;
import net.sf.jsqlparser.expression.operators.relational.ExistsExpression;
import net.sf.jsqlparser.expression.operators.relational.GreaterThan;
import net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals;
import net.sf.jsqlparser.expression.operators.relational.InExpression;
import net.sf.jsqlparser.expression.operators.relational.LikeExpression;
import net.sf.jsqlparser.expression.operators.relational.MinorThan;
import net.sf.jsqlparser.expression.operators.relational.MinorThanEquals;
import net.sf.jsqlparser.expression.operators.relational.NotEqualsTo;
import net.sf.jsqlparser.parser.CCJSqlParserUtil;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.util.deparser.ExpressionDeParser;

public class Rule {
    private Logger logger = null;

    public Rule() {
        logger = Logger.getLogger(Touchstone.class);
    }

    public static List<Rule> NQcase(SelectBody selectBody) {
        List<Rule> rules = new ArrayList<>();
        // set operations
        if (selectBody instanceof SetOperationList) {

        }
        else if (selectBody instanceof PlainSelect) {
            PlainSelect plainSelect = (PlainSelect) selectBody;
            // select
            List<SelectItem> selectItems = plainSelect.getSelectItems();
            for (SelectItem selectItem: selectItems) {
                if (selectItem.toString().contains("select")) {

                }
            }
            // from
            FromItem from = plainSelect.getFromItem();
            if (from instanceof SubSelect) {
                rules.add(new FromRule());
            }
            // where
            Expression where = plainSelect.getWhere();
            if (where != null && where.toString().contains("select")) {
                where.accept(new ExpressionVisitorAdapter() {
                    @Override 
                    public void visit(InExpression inExpression) {
                        if (inExpression.toString().contains("select")) {
                            if (inExpression.isNot()) {
                                rules.add(new NotInRule());
                            } else {
                                rules.add(new InRule());
                            }
                        }
                    }
                    @Override
                    public void visit(ExistsExpression existExpression) {
                        if (existExpression.toString().contains("select")) {
                            if (existExpression.isNot()) {
                                rules.add(new NotExistRule());
                            } else {
                                rules.add(new ExistRule());
                            }

                        }
                    }
                });
            }
            // having
            Expression having = plainSelect.getHaving();
            if (having != null) {

            }
        } else if (selectBody instanceof WithItem) {

        } else {

        }
        return rules;
    }

    /* 
     * @Input: a flat Select query (e.g., no WITH ..., CREATE ...)
     * @Output: a list of ConstraintChain generated by this query 
     */
    public HashMap<String, List<CCNode>> parse(Query query) {
        Statement stmt = query.getStmt();
        Select select = (Select) stmt;
        SelectBody selectBody = select.getSelectBody();
        PlainSelect plainSelect = (PlainSelect) selectBody;
        HashMap<String, List<CCNode>> ret = new HashMap<>();
        // where case
        Expression where = plainSelect.getWhere();
        if (where != null) {
            parseWhere(where);
        }

        return ret;
    }

    /*
     * @Input: where expression
     * @Description: parse all conditions in where
     * @Return: e.g., "a.c1 >= 3", "a.c2 like '%pattern'", "a.c3 in (1, 2, 3)"
     */
    public List<Object> parseWhere(Expression where) {
        List<Object> filterOperations = new ArrayList<>();
        where.accept(new ExpressionVisitorAdapter() {

            @Override 
            public void visit(InExpression inExpression) {
                String operator = (inExpression.isNot()) ? "not in" : "in";
            }

            @Override 
            public void visit(LikeExpression likeExpression) {
                String operator = (likeExpression.isNot()) ? "not like" : "like";
                FilterOperation filterOp = new FilterOperation(likeExpression, operator);
                filterOperations.add(filterOp);
            }

            @Override 
            public void visit(NotEqualsTo notEqualsTo) {
                FilterOperation filterOp = new FilterOperation(notEqualsTo, "<>");
                filterOperations.add(filterOp);
            }

            @Override
            public void visit(EqualsTo equalsTo) {
                FilterOperation filterOp = new FilterOperation(equalsTo, "=");
                filterOperations.add(filterOp);
            }

            @Override 
            public void visit(GreaterThan greaterThan) {
                FilterOperation filterOp = new FilterOperation(greaterThan, ">");
                filterOperations.add(filterOp);
            }

            @Override 
            public void visit(GreaterThanEquals greaterThanEquals) {
                FilterOperation filterOp = new FilterOperation(greaterThanEquals, ">=");
                filterOperations.add(filterOp);
            }

            @Override
            public void visit(MinorThan minorThan) {
                FilterOperation filterOp = new FilterOperation(minorThan, "<");
                filterOperations.add(filterOp);
            }

            @Override 
            public void visit(MinorThanEquals minorThanEquals) {
                FilterOperation filterOp = new FilterOperation(minorThanEquals, "<=");
                filterOperations.add(filterOp);
            }
        });
        logger.info("\n Query Filter Operations are: [\n" + filterOperations + "\n]");
        return null;
    }

    public static void main(String[] args) {
        String sql = "select attachments.* from attachments where (attachments.filename like '%' or filename <> '$1');";
        PropertyConfigurator.configure(".//test//lib//log4j.properties");
        try {
            PlainSelect selectSql = ((PlainSelect) ((Select) CCJSqlParserUtil.parse(sql)).getSelectBody());
            Expression e = selectSql.getWhere();
            e.accept(new ExpressionVisitorAdapter() {
            @Override 
            public void visit(Column expr) {
                System.out.println(expr.getTable());
                System.out.println(expr.getColumnName());
            }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}

class FilterOperation {
    String expression = null;
    String operator = null;
    String table = null;

    FilterOperation(BinaryExpression expr, String operator) {
        Expression left = expr.getLeftExpression();
        Expression right = expr.getRightExpression();
        Column leftColumn = (Column) left;
        String table = leftColumn.getTable().getName();
        String columnName = leftColumn.getColumnName();
        if (!right.toString().contains("$")) {
            operator += right.toString();
        }
        this.operator = operator;
        this.expression = columnName;
        this.table = table;
    }

    public void setTable(String table) {
        this.table = table;
    }
    public String getTable() {
        return this.table;
    }

    @Override
    public String toString() {
        return this.expression + "@" + this.operator;
    }
}